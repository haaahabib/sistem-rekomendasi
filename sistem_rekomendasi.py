# -*- coding: utf-8 -*-
"""Sistem Rekomendasi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GAH8YGLEDm-LKp8fPHxDoZ44mf2X9Pv-

### Sistem Rekomendasi Buku
- Nama: Muhammad Habibulloh
- ID Dicoding: MC258D5Y1827

### Import Library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from wordcloud import WordCloud
from IPython.display import display, HTML

"""### Load Dataset"""

df = pd.read_csv('goodreads_data.csv')
print(df.head())

print("\nData Shape:", df.shape)

"""### Exploratory Data Analysis

##### Cek missing values
"""

print("Missing Values:")
print(df.isnull().sum())

"""#### Visualisasi distribusi genre"""

all_genres = ' '.join(df['Genres'].astype(str))
wordcloud = WordCloud(width=800, height=400).generate(all_genres)
plt.figure(figsize=(12,6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.title('Distribusi Genre Buku', fontsize=16)
plt.axis('off')
plt.show()

"""### Data Preparation"""

# Data Cleaning
df_clean = df.dropna(subset=['Description', 'Genres']).copy()
df_clean['Genres'] = df_clean['Genres'].str.replace(r'[\[\]\']', '', regex=True)  # format Genres

# Gabungkan fitur teks
df_clean['content'] = df_clean['Genres'] + ' ' + df_clean['Description']

"""### Content-Based Filtering Model"""

# TF-IDF Vectorizer
tfidf = TfidfVectorizer(stop_words='english', ngram_range=(1,2))
tfidf_matrix = tfidf.fit_transform(df_clean['content'])

# Similarity
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Fungsi get rekomendasi
def get_content_recommendations(title, n=5):
    idx = df_clean[df_clean['Book'] == title].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_indices = [i[0] for i in sim_scores[1:n+1]]

    return df_clean[['Book', 'Author', 'Genres']].iloc[sim_indices]

"""### Popularity-Based Recommendation"""

# Popularitas score
df['Num_Ratings'] = pd.to_numeric(df['Num_Ratings'], errors='coerce')
df['Avg_Rating'] = pd.to_numeric(df['Avg_Rating'], errors='coerce')

# Menghitung skor popularitas untuk setiap buku
df['popularity_score'] = df['Num_Ratings'] * df['Avg_Rating']

# n=10
def get_popular_books(n=10):
    return df.sort_values('popularity_score', ascending=False)[['Book', 'Author', 'Avg_Rating', 'Num_Ratings']].head(n)

"""### Evaluasi"""

# Evaluasi Content-Based Filtering
def evaluate_content_based(k=5, sample_size=10):
    sample_books = df_clean.sample(sample_size)['Book'].tolist()
    total_precision = 0

    for book in sample_books:
        # Reference genre
        reference_genres = df_clean[df_clean['Book'] == book]['Genres'].values[0].split(', ')

        # Rekomendasi
        recommendations = get_content_recommendations(book, n=k)['Genres'].tolist()

        # Precision: berapa rekomendasi yang memiliki minimal 1 genre sama
        matched = 0
        for rec_genres in recommendations:
            if any(genre in rec_genres.split(', ') for genre in reference_genres):
                matched += 1

        precision = matched / k
        total_precision += precision

    return total_precision / sample_size

# Precision Score
precision_score = evaluate_content_based(k=5, sample_size=20)
print(f"\nEvaluasi Content-Based Filtering:")
print(f"Precision: {precision_score:.2%}")

# Evaluasi Popularity-Based

df_clean['Num_Ratings'] = pd.to_numeric(df_clean['Num_Ratings'], errors='coerce')
df_clean['Avg_Rating'] = pd.to_numeric(df_clean['Avg_Rating'], errors='coerce')

# popularity_score
df_clean['popularity_score'] = df_clean['Num_Ratings'] * df_clean['Avg_Rating']

# Misal buku dengan Num_Ratings > 900 adalah "bestseller"
df_clean['is_bestseller'] = df_clean['Num_Ratings'] > 900

# Fungsi get popular books
def get_popular_books_clean(n=10):
    return df_clean.sort_values('popularity_score', ascending=False)[['Book', 'Author', 'Avg_Rating', 'Num_Ratings']].head(n)

# Fungsi Evaluate popularity
def evaluate_popularity_based(n=10):
    top_books = get_popular_books_clean(n)

    # Memastikan agar tidak eror saat merge
    top_books['Book'] = top_books['Book'].astype(str)

    df_clean_unique_books = df_clean.drop_duplicates(subset=['Book']).copy()
    df_clean_unique_books['Book'] = df_clean_unique_books['Book'].astype(str)

    bestseller_count = top_books.merge(df_clean_unique_books[df_clean_unique_books['is_bestseller']], on='Book', how='inner').shape[0]

    return bestseller_count / n

# Bestseller di top recommendations
bestseller_ratio = evaluate_popularity_based(n=10)
print(f"Evaluasi Popularity-Based:")
print(f"Bestseller dalam Top 10: {bestseller_ratio:.2%}")

# Tes popular books
# Tes popular books
print("Top 10 Popular Books:")
popular_books_to_display = get_popular_books_clean(10)
html_output_popular_test = popular_books_to_display.to_html(index=False, classes='table table-striped table-bordered')
display(HTML(html_output_popular_test))

"""### Contoh"""

# Contoh 1 rekomendasi konten
print("Content-Based Recommendations 'The Hobbit':")
recommendations = get_content_recommendations('The Hobbit')

if not recommendations.empty:
    html_output = recommendations.to_html(index=False, classes='table table-striped table-bordered')

    # Display
    display(HTML(html_output))
else:
    print("Tidak ada rekomendasi ditemukan untuk 'The Hobbit'.")

# Contoh 2 rekomendasi konten
print("Content-Based Recommendations 'The Help':")
recommendations = get_content_recommendations('The Help')

if not recommendations.empty:
    html_output = recommendations.to_html(index=False, classes='table table-striped table-bordered')

    # Display
    display(HTML(html_output))
else:
    print("Tidak ada rekomendasi ditemukan untuk 'The Help'.")

# Contoh rekomendasi popularitas
print("Top 10 Popular Books:")
popular_recommendations = get_popular_books()

if not popular_recommendations.empty:
    html_output_popular = popular_recommendations.to_html(index=False, classes='table table-striped table-bordered')

    # Display
    display(HTML(html_output_popular))
else:
    print("Tidak ada buku populer ditemukan.")

"""### Simpan"""

# Simpan data
# Contoh 1 rekomendasi konten
content_rec_hobbit = get_content_recommendations('The Hobbit')

# Contoh 2 rekomendasi konten
content_rec_help = get_content_recommendations('The Help')

# Contoh rekomendasi popularitas
popular_rec = get_popular_books()

# Simpan rekomendasi ke CSV
content_rec_hobbit.to_csv('book_recommendations_hobbit.csv', index=False)
content_rec_help.to_csv('book_recommendations_help.csv', index=False)
popular_rec.to_csv('popular_book_recommendations.csv', index=False)